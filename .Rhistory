}
################################################################## CORONA
# selectize input for corona
#' @export
#' @rdname uiElements
selectize_corona <- function() {
selectizeInput("corona_measurement","Chose Corona measurement",
c("total_cases","new_cases","total_deaths","new_deaths","total_cases_per_million",
"new_cases_per_million","total_deaths_per_million","new_deaths_per_million","reproduction_rate",
"icu_patients","icu_patients_per_million","hosp_patients","hosp_patients_per_million",
"weekly_icu_admissions","weekly_icu_admissions_per_million","weekly_hosp_admissions",
"weekly_hosp_admissions_per_million","new_tests","total_tests","total_tests_per_thousand",
"new_tests_per_thousand","positive_rate","tests_per_case","total_vaccinations","people_vaccinated",
"people_fully_vaccinated","new_vaccinations","total_vaccinations_per_hundred","people_vaccinated_per_hundred",
"people_fully_vaccinated_per_hundred"),
multiple = FALSE,
selected = "total_deaths")
}
# sliderinput for dates
#' @export
#' @rdname uiElements
sliderinput_dates_corona <- function(){
sliderInput("dates_corona",label="Time",
value = c(as.Date("2020-01-22"),Sys.Date()),
min = as.Date("2020-01-22"),
max = Sys.Date(),
step = 1,timeFormat = "%F")}
#' @export
#' @rdname uiElements
plot_corona <- function() {
plotOutput("corona_plot",hover = hoverOpts("plot_hover_corona", delay = 10, delayType = "debounce"),
dblclick = "plot_corona_dblclick",
brush = brushOpts(id = "plot_corona_brush",resetOnNew = TRUE))
}
#' @export
#' @rdname uiElements
hover_info_corona <- function() {
uiOutput("hover_info_corona",style = "pointer-events: none")
}
shinyApp(ui,server)
library(shiny)
library(ggplot2)
library(dplyr)
#' Functions to load stock data
####################################   GERMANY    ##############################
#' @export
#' @rdname load_stocks
'1COV' <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EYKHb5XsE0VFmYcgAv4jiWQBBUjSIB3HnBpzRIv-WaI-8A?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
ADS <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EWf5tG1J6SVNmpE6jsTVk5gBam18MZEFc04M9d4NcuA3cg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
ALV <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EeTTLFtjzKBGpv8Oe4MBuyYBLB6Cx3PH1g2EVDhARkM6iw?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
BAS <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EXbI3FO9YutFo1NFBzwUbM8BGAkr--uktjTOOO9VeBM3ow?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
BAYN <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EZqdO9AyGtlOirLVpTyHA70BaD8ZO4yG9GXmvImYtfcwRw?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
BEI <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/ET5_BNOcPg5Dl2DVXvlLI60BOwToagfdcyH1ZAkqAhzesg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
BMW <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EbpRTV8rxRxDtnl_pKqbCNABiLlhvU9Bhw--N0sHeYs3ag?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
CON <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EWCVzQ0wIERJjBHV5Qu8R-YBzgBEVh6SJY-Ds78Jgtgv4w?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
DAI <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EUctu2J2jiBBr5D7m6Mrz3YBl62_yxJ9_RiS4-dikWi4Rw?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
DB1 <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EXwXGZxUjmlAiEnb-agzx7oB8HPnTGTd6HkXNuz-DXegfA?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
DBK <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EX2JrKluQplIrG_2UZeBlgwB_mAnnZ3hWc54lgGGTz4UKg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
DHER <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EdCnOREhpSVCpQOpEVbxSS4BmMQJIeEM1_TcmgXuzDlHRQ?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
DPW <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/ETbWtb2ATZlMhxNkgZAHqDkBaXCnGlX2ydsmVcrMQiPtzg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
DTE <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Ea1n9Cp69Z9Ltt_-W9yb-bYBx54iBHfFtZ2rRCgs5S2Scg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
DWNI <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Eesxi671ft5Dk_0xbS4jd70BDzEecIs66NfoTV6yQDnQ8g?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
EOAN <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/ESpOBNcHZrlHpu8VDoSJ-nYBBmHhSsdxXIBka97zfhSmlw?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
FME <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/ESciDXd9SuhDuzkXb6lz1rIB4ID9mJBm6abVlyPVzMjH0Q?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
FRE <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EcUMV2-LKfJHpNTrqsLAy3YB9YZDK7qAtveJSh4SeyrQZQ?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
GDAXI <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EVO4lOATrkFMgSvfkMML30oB0Clv4c4TQhKi7bA5wc7Q9Q?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
HEI <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Ec7HQpS5nLpJjOvlfKA8FOoB5AR9NdUT3IobGc-r6iB1Wg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
HEN3 <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Eeyx7M5P48JFu2lFCadfwvEB2hKIa3IWKCFJptXI4-u4fQ?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
IFX <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EZf1vfehjU1DiASkBefIBKYBKPNfvIzb6ImKnsl76sUp0w?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
COMPONENTS_DE <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EYhDUmLHadVFlHwO8KkVUuABSVgQRPS0nadLAYaRgxIYSw?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
LIN <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Eb_n-DhxkFZEivKcj_pTI-gBTZy3hTvCPgg_qGHg0dQ87g?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
MRK <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Edu-OfsHgPpPj67esdMP3VAByunsA_nf8scLtpk_JHkshQ?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
MTX <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EQ5z4xhP6nJCs_fkAQmsO7IBUnwVHVJ-ePkYNVDLXzFlQQ?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
MUV2 <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EX_STEchI3lIjDQMnDWIdMMBFLh9Lz147DHJyBlNj0Lxlw?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
RWE <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EUPUs-EwHhRKlshS-KI2I7oB2VgThFQBJdwC8JXAHgTXNg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
SAP <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Eff5NMtZYmlPunGMT8Tc27cBCp6_GhZ9GksDC7AWYhGyVg?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
SIE <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EfcJySCAF1JJvE1DmIityLAB9eYyrZDfo0DU_bchhnr5yA?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
VNA <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Ef-VKe52pSRAqyrdMSIk2DcBMc-N5x_pw_PCtDnmS8WK_A?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
VOW3 <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Efut0CAhYUJOkR7ifEcUX94Bp2HglbiDSfMhzLrES7GkYA?download=1"
read.csv(filename)
}
#' Stock Calculations
#'
#CORONA dataset for selcted countries
#' @export
#' @rdname corona_calculations
CORONA <- function(country,datestart,dateend){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/ESmxHV1gNxNOtOgcSFPOoFQBNe4PBlvcMiw7MvSmZTiZuw?download=1"
help <- filter(read.csv(filename),location %in% c(country))
help$date <- as.Date(help$date)
help <- filter(help,date >= datestart & date <= dateend)
help
}
#' @export
#' @rdname corona_calculations
create_hover_info_corona <- function(hovercorona,coronadata,selectedmeasure){
hover <- hovercorona
point <- nearPoints(coronadata, hover, threshold = 10, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.6); ",
"left:", left_px + 2, "px; top:", top_px + 30, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$location, "<br/>",
"<b> Date: </b>", point$date, "<br/>",
"<b>" ,selectedmeasure,": </b>", point[selectedmeasure], "<br/>")))
)
}
#' Stock Calculations
#'
#german stock dataset filtered according to selected date
#' @export
#' @rdname stock_calculations
stock_dataset_DE <- function(stock,date1,date2){
symbols <- COMPONENTS_DE()[["Symbol"]][COMPONENTS_DE()[["Company.Name"]] %in% stock]
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
all %>%
filter(Date >= date1 & Date <= date2)
}
#' @export
#' @rdname stock_calculations
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 10, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.6); ",
"left:", left_px + 2, "px; top:", top_px + 60, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
#' UI Elements
#'
#'
#' @export
#' @rdname uiElements
#####################################################   Stocks
# selectize input for companies
#' @export
#' @rdname uiElements
selectize_Stocks <- function(components) {
selectizeInput("Stock","Chose Company",
c(components[["Company.Name"]]),
selected = "Bayer ",multiple = TRUE
)
}
# sliderinput for dates
#' @export
#' @rdname uiElements
sliderinput_dates <- function(){
sliderInput("dates",label="Timeseries",
value = c(min(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
}
#plotoutput for german companies
#' @export
#' @rdname uiElements
plot_stocks_DE <- function() {
plotOutput("plot_DE",hover = hoverOpts("plot_hover_DE", delay = 10, delayType = "debounce"),
dblclick = "plot1_dblclick",
brush = brushOpts(id = "plot1_brush",resetOnNew = TRUE))
}
#hoverbox in german plot
#' @export
#' @rdname uiElements
hover_info_DE <- function() {
uiOutput("hover_info_DE",style = "pointer-events: none")
}
################################################################## CORONA
# selectize input for corona
#' @export
#' @rdname uiElements
selectize_corona <- function() {
selectizeInput("corona_measurement","Chose Corona measurement",
c("total_cases","new_cases","total_deaths","new_deaths","total_cases_per_million",
"new_cases_per_million","total_deaths_per_million","new_deaths_per_million","reproduction_rate",
"icu_patients","icu_patients_per_million","hosp_patients","hosp_patients_per_million",
"weekly_icu_admissions","weekly_icu_admissions_per_million","weekly_hosp_admissions",
"weekly_hosp_admissions_per_million","new_tests","total_tests","total_tests_per_thousand",
"new_tests_per_thousand","positive_rate","tests_per_case","total_vaccinations","people_vaccinated",
"people_fully_vaccinated","new_vaccinations","total_vaccinations_per_hundred","people_vaccinated_per_hundred",
"people_fully_vaccinated_per_hundred"),
multiple = FALSE,
selected = "total_deaths")
}
# sliderinput for dates
#' @export
#' @rdname uiElements
sliderinput_dates_corona <- function(){
sliderInput("dates_corona",label="Time",
value = c(as.Date("2020-01-22"),Sys.Date()),
min = as.Date("2020-01-22"),
max = Sys.Date(),
step = 1,timeFormat = "%F")}
#' @export
#' @rdname uiElements
plot_corona <- function() {
plotOutput("corona_plot",hover = hoverOpts("plot_hover_corona", delay = 10, delayType = "debounce"),
dblclick = "plot_corona_dblclick",
brush = brushOpts(id = "plot_corona_brush",resetOnNew = TRUE))
}
#' @export
#' @rdname uiElements
hover_info_corona <- function() {
uiOutput("hover_info_corona",style = "pointer-events: none")
}
server <- function(input, output, session) {
############################################################# Stocks
# load stock dataset
stockdata_DE <- reactive({
req(input$Stock)
stock_dataset_DE(input$Stock,input$dates[1],input$dates[2])
})
# reset button for stock selection
observeEvent(input$reset,{
updateSelectizeInput(session,"Stock",selected = "")
})
# plot of the stocks
output$plot_DE <- renderPlot({
req(input$Stock)
if (!is.null(ranges$x)) {
ranges$x <- as.Date(ranges$x, origin = "1970-01-01")
}
ggplot(stockdata_DE(),aes(Date,Close.,color = name))+
geom_line()+
theme_classic()+
coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE)
})
# hover info box
output$hover_info_DE <- renderUI({
req(input$hovering)
create_hover_info_DE(input$plot_hover_DE,stockdata_DE())
})
# zoom functionality
ranges <- reactiveValues(x = NULL, y = NULL)
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
#####################################################################
##################################################################### Corona
corona_data <- reactive({
CORONA(input$CoronaCountry,input$dates_corona[1],input$dates_corona[2])
})
output$corona_plot <- renderPlot({
if (!is.null(ranges2$x)) {
ranges2$x <- as.Date(ranges2$x, origin = "1970-01-01")
}
ggplot(corona_data(), aes_string("date",input$corona_measurement,color = "location"))+
geom_line() +
theme_classic() +
coord_cartesian(xlim = ranges2$x, ylim = ranges2$y, expand = FALSE)
})
# hover info box
output$hover_info_corona <- renderUI({
req(input$hovering_corona)
create_hover_info_corona(input$plot_hover_corona, corona_data(),input$corona_measurement)
})
# zoom functionality
ranges2 <- reactiveValues(x = NULL, y = NULL)
observeEvent(input$plot_corona_dblclick, {
brush <- input$plot_corona_brush
if (!is.null(brush)) {
ranges2$x <- c(brush$xmin, brush$xmax)
ranges2$y <- c(brush$ymin, brush$ymax)
} else {
ranges2$x <- NULL
ranges2$y <- NULL
}
})
}
Sys.setlocale("LC_TIME", "English")
ui <- fluidPage(
#theme = shinythemes::shinytheme("cosmo"),
shinythemes::themeSelector(),
titlePanel("Sentiment_Covid_App"),
tabsetPanel(
tabPanel("Twitter"),
tabPanel("Sentiment"),
tabPanel("Stocks",
sidebarPanel(
selectize_Stocks(COMPONENTS_DE()),
actionButton("reset", "clear selected"),
checkboxInput("hovering","Enable hover",value = FALSE),
sliderinput_dates()
),
mainPanel(
tabsetPanel(
tabPanel("Germany",
plot_stocks_DE(),
hover_info_DE()
),#close tabPanel Germany
tabPanel("USA")
)#close tabsetPanel
)#close mainpanel
),#close tabPanel stock
tabPanel("Corona",
sidebarPanel(
selectize_corona(),
checkboxGroupInput("CoronaCountry","Country",c("Germany","United States"),selected = "Germany"),
sliderinput_dates_corona(),
checkboxInput("hovering_corona","Enable hover",value = FALSE)
),
mainPanel(
plot_corona(),
hover_info_corona()
)
)#close tabPanel Corona
)#close tabsetPanel
)#close fluidpage
shinyApp(ui,server)
roxygen2::roxygenize()
roxygen2::roxygenize()
