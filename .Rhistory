condition = "input.plot_type == 'sum_stats'",
"text",
plotOutput('sum_stats_plot')#, height = "800px")
)
)
)
)
server <- function(session, input, output){
# avoid that date range upper value can be lower than lower value
# Update the dateRangeInput if start date changes
observeEvent(input$dates[1], {
end_date = input$dates[2]
# If end date is earlier than start date, update the end date to be the same as the new start date
if (input$dates[2] < input$dates[1]) {
end_date = input$dates[1]
}
updateDateRangeInput(session,"dates", start=input$dates[1], end=end_date, min=input$dates[1] )
})
######## disconnect from database after exit
cancel.onSessionEnded <- session$onSessionEnded(function() {
DBI::dbDisconnect(con)
})
querry <- reactive({
if (input$long == T){
long <- 81
} else{
long <- 0
}
#browser()
if (input$plot_type == "sum_stats"){
if (input$value == "N"){
metric <- "N"
} else if (input$value == "tweet_length"){
metric <- glue("{input$metric}_{length}")
} else{
metric <- glue("{input$metric}_{input$value}")
}
table_name <- glue("{input$plot_type}_{tolower(input$lang)}_all")
glue("SELECT created_at, {metric} as value FROM {table_name}  WHERE created_at >= '{input$dates[1]}'
and created_at <= '{input$dates[2]}'
and retweets_count = {input$rt} and likes_count = {input$likes} and
tweet_length = {long}" )
} else if (input$plot_type == "histo"){
if (input$value == "length"){
tb_metric <- "len"
col_value <- input$value
} else if(input$value == "rt") {
tb_metric <- input$value
col_val <- "retweets_count"
} else if(input$value == "likes") {
tb_metric <- input$value
col_val <- "likes_count"
} else if(input$value == "sentiment"){
tb_metric <- input$value
col_val <- "sentiment_rd"
}
table_name <- glue("{input$plot_type}_{tb_metric}_{tolower(input$lang)}")
if (table_name %in% c("histo_rt_en", "histo_likes_en", "histo_len_en")){
date_col <- "date"
} else{
date_col <- "created_at"
}
querry_str <- glue("SELECT {col_val}, sum(N) as  n  FROM {table_name}  WHERE {date_col} >=  '{input$dates[1]}'
and {date_col} <= '{input$dates[2]}'
and retweets_count_filter = {input$rt} and likes_count_filter = {input$likes} and
tweet_length_filter = {long}
group by {col_val}")
}
#browser()
})
data <- reactive({
df_need <- DBI::dbGetQuery(con, querry())
df_need
})
output$sum_stats_plot <- renderPlot({
df <- data()
if(input$plot_type == "sum_stats"){
browser()
df$created_at <- as.Date(df$created_at)
df %>%
ggplot(aes(x = created_at,
y = value)) +
geom_line()
}
})
observeEvent(input$value, {
#browser()
if (input$value == "sentiment") {
shinyWidgets::updateSwitchInput(session = session,
"log_scale",
disabled = T)
} else {
shinyWidgets::updateSwitchInput(session = session,
"log_scale",
disabled = F)
}
})
output$histo_plot <- renderPlot({
df <- data()
#freezeReactiveValue(input, "plot_type")
# if sentiment then disable log button because has negative values
if (input$plot_type == "histo"){
df %>%
# {if (input$log_scale == T) {} else {
#          mutate(bins = cut_interval(.[[1]], n = input$bins))
#        }
# }
mutate(metric = case_when(input$log_scale == T ~ log(as.numeric(.[[1]])+ 0.0001),
input$log_scale == F ~ as.numeric(.[[1]])),
bins = cut_interval(metric, n = input$bins))%>%
ggplot(aes(bins, n)) +
geom_col() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
})
}
shinyApp(ui, server)
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
head(df)
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
glue("SELECT created_at, {metric} as value FROM {table_name}  WHERE created_at >= '{input$dates[1]}'
and created_at <= '{input$dates[2]}'
and retweets_count = {input$rt} and likes_count = {input$likes} and
tweet_length = {long}" )
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
(input$plot_type == "sum_stats")
(input$value == "tweet_length")
input$metric
input$value
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
input$value
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
input$value
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
input$value
if (input$value == "length"){
tb_metric <- "len"
col_value <- input$value
} else if(input$value == "rt") {
tb_metric <- input$value
col_val <- "retweets_count"
} else if(input$value == "likes") {
tb_metric <- input$value
col_val <- "likes_count"
} else if(input$value == "sentiment"){
tb_metric <- input$value
col_val <- "sentiment_rd"
}
(input$value == "rt")
tb_metric <- input$value
col_val <- "retweets_count"
table_name <- glue("{input$plot_type}_{tb_metric}_{tolower(input$lang)}")
if (table_name %in% c("histo_rt_en", "histo_likes_en", "histo_len_en")){
date_col <- "date"
} else{
date_col <- "created_at"
}
(table_name %in% c("histo_rt_en", "histo_likes_en", "histo_len_en"))
date_col <- "date"
glue("SELECT {col_val}, sum(N) as  n  FROM {table_name}  WHERE {date_col} >=  '{input$dates[1]}'
and {date_col} <= '{input$dates[2]}'
and retweets_count_filter = {input$rt} and likes_count_filter = {input$likes} and
tweet_length_filter = {long}
group by {col_val}")
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
c
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
source('~/.active-rstudio-document', echo=TRUE)
ui <- fluidPage(
selectInput("dataset", "Choose a dataset", c("pressure", "cars")),
selectInput("column", "Choose column", character(0)),
verbatimTextOutput("summary")
)
server <- function(input, output, session) {
dataset <- reactive(get(input$dataset, "package:datasets"))
observeEvent(input$dataset, {
updateSelectInput(inputId = "column", choices = names(dataset()))
})
output$summary <- renderPrint({
summary(dataset()[[input$column]])
})
}
shinyApp(ui, server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
querry_str <- "SELECT retweets_count, sum(N) as  n  FROM histo_rt_en  WHERE date >= '2018-11-30' and date <= '2021-02-13'
and retweets_count_filter = 0 and likes_count_filter = 0 and
tweet_length_fi = 0
group by retweets_count
"
old_wd <- getwd()
setwd("C:/Users/lukas/OneDrive - UT Cloud/Data/SQLiteStudio/databases")
con <- DBI::dbConnect(RSQLite::SQLite(), "test.db")
setwd(old_wd)
time1 <- Sys.time()
df_need <- DBI::dbGetQuery(con, querry_str)
print(Sys.time() -  time1)
#disconnect
DBI::dbDisconnect(con)
old_wd <- getwd()
setwd("C:/Users/lukas/OneDrive - UT Cloud/Data/SQLiteStudio/databases")
con <- DBI::dbConnect(RSQLite::SQLite(), "test.db")
DBI::dbGetQuery(con, querry_str)
glue({"fe"})
#browser()
if (input$value == "length"){
tb_metric <- "len"
col_value <- input$value
} else if(input$value == "rt") {
tb_metric <- input$value
col_val <- "retweets_count"
} else if(input$value == "likes") {
tb_metric <- input$value
col_val <- "likes_count"
} else if(input$value == "sentiment"){
tb_metric <- input$value
col_val <- "sentiment_rd"
} else{
return()
}
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
runApp('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/descriptives_shiny.R')
devtools::load_all(".")
runApp("lukas_test/app/inst")
runApp("test_lukas/app/inst")
source('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/dir_selector.R', echo=TRUE)
source('~/GitHub/DSP_Sentiment_Covid_App/test_lukas/R_test/dir_selector.R', echo=TRUE)
runApp("test_lukas/inst_test")
devtools::load_all(".")
runApp("test_lukas/inst_test")
runApp("test_lukas/inst_test")
runApp("inst")
runApp("test_lukas/app")
runApp("test_lukas/app/inst")
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
devtools::load_all(".")
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
devtools::load_all(".")
runApp('test_lukas/app/inst')
runApp('test_lukas/app/inst')
runApp('test_lukas/inst_test')
runApp("lukas_test/app/inst")
devtools::load_all(".")
runApp("lukas_test/app/inst")
runApp("test_lukas/app/inst")
runApp()
runApp("test_lukas/app/inst")
runApp()
runApp("test_lukas/app/inst")
runApp("test_lukas/app/inst")
shinyFiles::shinyDirChoose()
runApp('test_lukas/app/inst')
devtools::load_all(".")
runApp("test_lukas/app/inst")
runApp("test_lukas/app/inst")
getwd()
runApp("test_lukas/app/inst")
runApp("test_lukas/app/inst")
runApp("test_lukas/app/inst")
devtools::load_all(".")
devtools::load_all(".")
runApp("test_lukas/app/inst")
runApp("test_lukas/app/inst")
runApp("test_lukas/app/inst")
runApp("test_lukas/app/inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp()
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
devtools::load_all(".")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
ui <- fluidPage(
numericInput("n", "Simulations", 10),
actionButton("simulate", "Simulate")
)
server <- function(input, output, session) {
observeEvent(input$n, {
label <- paste0("Simulate ", input$n, " times")
updateActionButton(inputId = "simulate", label = label)
})
}
shinyApp(ui, server)
ui <- fluidPage(
numericInput("n", "Simulations", 10),
actionButton("simulate", "Simulate")
)
server <- function(input, output, session) {
observeEvent(input$n,session {
label <- paste0("Simulate ", input$n, " times")
updateActionButton(inputId = "simulate", label = label)
})
}
shinyApp(ui, server)
ui <- fluidPage(
numericInput("n", "Simulations", 10),
actionButton("simulate", "Simulate")
)
server <- function(input, output, session) {
observeEvent(input$n {
label <- paste0("Simulate ", input$n, " times")
updateActionButton(inputId = "simulate", label = label, ,session)
})
}
shinyApp(ui, server)
ui <- fluidPage(
numericInput("n", "Simulations", 10),
actionButton("simulate", "Simulate")
)
server <- function(input, output, session) {
observeEvent(input$n {
label <- paste0("Simulate ", input$n, " times")
updateActionButton(inputId = "simulate", label = label, session)
})
}
shinyApp(ui, server)
ui <- fluidPage(
numericInput("n", "Simulations", 10),
actionButton("simulate", "Simulate")
)
server <- function(input, output, session) {
observeEvent(input$n {
label <- paste0("Simulate ", input$n, " times")
updateActionButton(inputId = "simulate", label = label,session= session)
})
}
shinyApp(ui, server)
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp('test_lukas/R_test/term_freq.R')
runApp('test_lukas/R_test/term_freq.R')
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
getwd()
file_path <- file.path("Twitter/term_freq",folder, subfolder, file_name)
file_path
runApp("inst")
getwd()
runApp("inst")
getwd()
file_path <- file.path("Twitter/term_freq",folder, subfolder, file_name)
file_path
#browser()
df <- readr::read_csv(file_path, col_types = cols(date_variable = "D"))
df
runApp("inst")
getwd()
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
library(shiny)
ui <- pageWithSidebar(
headerPanel("renderImage example"),
sidebarPanel(
sliderInput("obs", "Number of observations:",
min = 0, max = 1000,  value = 500)
),
mainPanel(
# Use imageOutput to place the image on the page
imageOutput("myImage")
)
)
server <- function(input, output, session) {
output$myImage <- renderImage({
# A temp file to save the output.
# This file will be removed later by renderImage
outfile <- tempfile(fileext = '.png')
# Generate the PNG
png(outfile, width = 400, height = 300)
hist(rnorm(input$obs), main = "Generated in renderImage()")
dev.off()
# Return a list containing the filename
list(src = outfile,
contentType = 'image/png',
width = 400,
height = 300,
alt = "This is alternate text")
}, deleteFile = TRUE)
}
shinyApp(ui, server)
runApp("inst")
runApp("inst")
runApp("inst")
filename <-file.path('images',"twitter_image.png")
getwd()
runApp("inst")
filename <- "C:/Users/lukas/OneDrive - UT Cloud/Data/images"
list(src = filename,
alt = "This is the Twitter Logo",
contentType = "Images/png")
runApp("inst")
runApp("inst")
runApp("inst")
shinyFilesExample()
shinyFiles::shinyFilesExample()
shinyFiles::shinyFilesExample()
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
devtools::load_all(".")
runApp("inst")
runApp("inst")
runApp("inst")
runApp("inst")
