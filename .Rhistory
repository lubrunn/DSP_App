if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
ui <- fluidPage(
theme = shinythemes::shinytheme("slate"),
#shinythemes::themeSelector(),
titlePanel("Sentiment_Covid_App"),
tabsetPanel(
tabPanel("Twitter"),
tabPanel("Sentiment"),
tabPanel("Stocks",
sidebarPanel(
selectize_Stocks(COMPONENTS_DE()),
actionButton("reset", "clear selected"),
checkboxInput("hovering","Enable hover"),
sliderinput_dates()
),
mainPanel(
tabsetPanel(
tabPanel("Germany",
plot_stocks_DE(),
hover_info_DE(),
plot_stocks_US(),
hover_info_US()
),#close tabPanel Germany
tabPanel("USA")
)#close tabsetPanel
)#close mainpanel
)#close tabPanel stock
)#close tabsetPanel
)#close fluidpage
shinyApp(ui,server)
ui <- fluidPage(
theme = shinythemes::shinytheme("slate"),
#shinythemes::themeSelector(),
titlePanel("Sentiment_Covid_App"),
tabsetPanel(
tabPanel("Twitter"),
tabPanel("Sentiment"),
tabPanel("Stocks",
sidebarPanel(
selectize_Stocks(COMPONENTS_DE()),
actionButton("reset", "clear selected"),
checkboxInput("hovering","Enable hover",value = FALSE),
sliderinput_dates()
),
mainPanel(
tabsetPanel(
tabPanel("Germany",
plot_stocks_DE(),
hover_info_DE(),
plot_stocks_US(),
hover_info_US()
),#close tabPanel Germany
tabPanel("USA")
)#close tabsetPanel
)#close mainpanel
)#close tabPanel stock
)#close tabsetPanel
)#close fluidpage
shinyApp(ui,server)
server <- function(input, output, session) {
stockdata_DE <- reactive({
req(input$Stock)
stock_dataset_DE(input$Stock,input$dates[1],input$dates[2])
})
observeEvent(input$reset,{
updateSelectizeInput(session,"Stock",selected = "")
})
output$plot_DE <- renderPlot({
req(input$Stock)
if (!is.null(ranges$x)) {
ranges$x <- as.Date(ranges$x, origin = "1970-01-01")
}
ggplot(stockdata_DE(),aes(Date,Close.,color = name))+
geom_line()+
theme_classic()+
coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE)
})
output$hover_info_DE <- renderUI({
req(input$hovering)
create_hover_info_DE(input$plot_hover_DE,stockdata_DE())
})
ranges <- reactiveValues(x = NULL, y = NULL)
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
}
shinyApp(ui,server)
#' @export
#' @rdname uiElements
plot_stocks_US <- function() {
plotOutput("plot_US",hover = hoverOpts("plot_hover_US", delay = 10, delayType = "throttle"))
}
#hoverbox in us plot
#' @export
#' @rdname uiElements
hover_info_US <- function() {
uiOutput("hover_info_US")
}
shinyApp(ui,server)
#' @export
#' @rdname stock_calculations
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
#hoverbox in german plot
#' @export
#' @rdname uiElements
hover_info_DE <- function() {
uiOutput("hover_info_DE",style = "pointer-events: none")
}
shinyApp(ui,server)
#' @export
#' @rdname stock_calculations
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 4, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 5, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
#' @export
#' @rdname stock_calculations
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 20, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 20, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
#' @export
#' @rdname stock_calculations
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 40, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
#' @export
#' @rdname stock_calculations
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 60, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
create_hover_info_DE <- function(hoverinput,stockdata){
hover <- hoverinput
point <- nearPoints(stockdata, hover, threshold = 500, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.6); ",
"left:", left_px + 2, "px; top:", top_px + 60, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
}
shinyApp(ui,server)
ui <- fluidPage(
theme = shinythemes::shinytheme("cosmo"),
#shinythemes::themeSelector(),
titlePanel("Sentiment_Covid_App"),
tabsetPanel(
tabPanel("Twitter"),
tabPanel("Sentiment"),
tabPanel("Stocks",
sidebarPanel(
selectize_Stocks(COMPONENTS_DE()),
actionButton("reset", "clear selected"),
checkboxInput("hovering","Enable hover",value = FALSE),
sliderinput_dates()
),
mainPanel(
tabsetPanel(
tabPanel("Germany",
plot_stocks_DE(),
hover_info_DE(),
plot_stocks_US(),
hover_info_US()
),#close tabPanel Germany
tabPanel("USA")
)#close tabsetPanel
)#close mainpanel
)#close tabPanel stock
)#close tabsetPanel
)#close fluidpage
shinyApp(ui,server)
ui <- fluidPage(
#theme = shinythemes::shinytheme("cosmo"),
shinythemes::themeSelector(),
titlePanel("Sentiment_Covid_App"),
tabsetPanel(
tabPanel("Twitter"),
tabPanel("Sentiment"),
tabPanel("Stocks",
sidebarPanel(
selectize_Stocks(COMPONENTS_DE()),
actionButton("reset", "clear selected"),
checkboxInput("hovering","Enable hover",value = FALSE),
sliderinput_dates()
),
mainPanel(
tabsetPanel(
tabPanel("Germany",
plot_stocks_DE(),
hover_info_DE(),
plot_stocks_US(),
hover_info_US()
),#close tabPanel Germany
tabPanel("USA")
)#close tabsetPanel
)#close mainpanel
)#close tabPanel stock
)#close tabsetPanel
)#close fluidpage
shinyApp(ui,server)
server <- function(input, output, session) {
############################################################# Stocks
# load stock dataset
stockdata_DE <- reactive({
req(input$Stock)
stock_dataset_DE(input$Stock,input$dates[1],input$dates[2])
})
# reset button for stock selection
observeEvent(input$reset,{
updateSelectizeInput(session,"Stock",selected = "")
})
# plot of the stocks
output$plot_DE <- renderPlot({
req(input$Stock)
if (!is.null(ranges$x)) {
ranges$x <- as.Date(ranges$x, origin = "1970-01-01")
}
ggplot(stockdata_DE(),aes(Date,Close.,color = name))+
geom_line()+
theme_classic()+
coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE)
})
# hover info box
output$hover_info_DE <- renderUI({
req(input$hovering)
create_hover_info_DE(input$plot_hover_DE,stockdata_DE())
})
# zoom functionality
ranges <- reactiveValues(x = NULL, y = NULL)
observeEvent(input$plot1_dblclick, {
brush <- input$plot1_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- NULL
ranges$y <- NULL
}
})
#####################################################################
}
#' UI Elements
#'
#'
#' @export
#' @rdname uiElements
#####################################################   Stocks
# selectize input for companies
#' @export
#' @rdname uiElements
selectize_Stocks <- function(components) {
selectizeInput("Stock","Chose Company",
c(components[["Company.Name"]]),
multiple=TRUE,
selected = "")
}
# sliderinput for dates
#' @export
#' @rdname uiElements
sliderinput_dates <- function(){
sliderInput("dates",label="Timeseries",
value = c(median(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
}
#plotoutput for german companies
#' @export
#' @rdname uiElements
plot_stocks_DE <- function() {
plotOutput("plot_DE",hover = hoverOpts("plot_hover_DE", delay = 10, delayType = "debounce"),
dblclick = "plot1_dblclick",
brush = brushOpts(id = "plot1_brush",resetOnNew = TRUE))
}
#hoverbox in german plot
#' @export
#' @rdname uiElements
hover_info_DE <- function() {
uiOutput("hover_info_DE",style = "pointer-events: none")
}
ui <- fluidPage(
#theme = shinythemes::shinytheme("cosmo"),
shinythemes::themeSelector(),
titlePanel("Sentiment_Covid_App"),
tabsetPanel(
tabPanel("Twitter"),
tabPanel("Sentiment"),
tabPanel("Stocks",
sidebarPanel(
selectize_Stocks(COMPONENTS_DE()),
actionButton("reset", "clear selected"),
checkboxInput("hovering","Enable hover",value = FALSE),
sliderinput_dates()
),
mainPanel(
tabsetPanel(
tabPanel("Germany",
plot_stocks_DE(),
hover_info_DE()
),#close tabPanel Germany
tabPanel("USA")
)#close tabsetPanel
)#close mainpanel
)#close tabPanel stock
)#close tabsetPanel
)#close fluidpage
shinyApp(ui,serve)
shinyApp(ui,server)
