library(shiny); runApp('chapter2_basicUI.R')
ui <- fluidPage(
plotOutput("plot", width = "700px", height = "300px")
)
server <- function(input, output, session) {
output$plot <- renderPlot(plot(1:5), res = 96)
}
shinyApp(ui, server)
runApp('chapter2_basicUI.R')
?renderDataTable
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
runApp('chapter2_basicUI.R')
library(shiny); runApp('2_HelloWorld.R')
runApp('2_HelloWorld.R')
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
selectInput("dataset", label = "Dataset", choices = ls("package:datasets")),
verbatimTextOutput("summary"),
tableOutput("table")
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
shinyApp(ui, server)
server <- function(input, output, session) {
output$summary <- renderPrint({
dataset <- get(input$dataset, "package:datasets")
summary(dataset)
})
output$table <- renderTable({
dataset <- get(input$dataset, "package:datasets")
dataset
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Create a reactive expression
dataset <- reactive({
get(input$dataset, "package:datasets")
})
output$summary <- renderPrint({
# Use a reactive expression by calling it like a function
summary(dataset())
})
output$table <- renderTable({
dataset()
})
}
shinyApp(ui, server)
source('~/Uni/shiny buch/2_exercises.R', echo=TRUE)
library(shiny)
ui <- fluidPage(
sliderInput("x", label = "If x is", min = 1, max = 50, value = 30),
"then x times 5 is",
textOutput("product")
)
server <- function(input, output, session) {
output$product <- renderText({
x * 5
})
}
shinyApp(ui, server)
source('~/.active-rstudio-document', echo=TRUE)
runApp('2_exercises2_sliderMultiplyTextoutput.R')
runApp('2_exercises2_sliderMultiplyTextoutput.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('2_exercises2_sliderMultiplyTextoutput.R')
?sliderInput
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Uni/shiny buch/3_ex2_SelectInput_SubHeadings.R', echo=TRUE)
selectInput("breed", "Select animal",
choices = list("dogs" = list("german shepherd", "bulldog"),
"cats" = list("persian cat", "bengal cat")))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(reactable)
install.packages(reactable)
install.packages("reactable")
library(reactable)
ui <- fluidPage(
reactableOutput("table")
)
server <- function(input, output, session) {
output$table <- renderteactable(mtcars, options = list(ordering = F,
searching = F))
}
shinyApp(ui, server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("reactable")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("reactable")
install.packages("reactable")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
theme_demo <- function(theme) {
fluidPage(
theme = shinythemes::shinytheme(theme),
sidebarLayout(
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30)
),
mainPanel(
h1("Header 1"),
h2("Header 2"),
p("Some text")
)
)
)
}
theme_demo("darkly")
theme_demo <- function(theme) {
fluidPage(
theme = shinythemes::shinytheme(theme),
sidebarLayout(
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30)
),
mainPanel(
h1("Header 1"),
h2("Header 2"),
p("Some text")
)
)
)
}
quit
quit()
theme_demo <- function(theme) {
fluidPage(
theme = shinythemes::shinytheme(theme),
sidebarLayout(
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30)
),
mainPanel(
h1("Header 1"),
h2("Header 2"),
p("Some text")
)
)
)
}
theme_demo("darkly")
theme_demo("flatly")
theme_demo("sandstone")
install.packages("shinythemes")
theme_demo <- function(theme) {
fluidPage(
theme = shinythemes::shinytheme(theme),
sidebarLayout(
sidebarPanel(
textInput("txt", "Text input:", "text here"),
sliderInput("slider", "Slider input:", 1, 100, 30)
),
mainPanel(
h1("Header 1"),
h2("Header 2"),
p("Some text")
)
)
)
}
theme_demo("darkly")
theme_demo("flatly")
ui <- theme_demo("darkly")
server <- function(omput, output, session){}
shinyApp(ui, server)
runApp('3_ex22_dataTable_removeSearchingetc.R')
runApp('3_ex22_dataTable_removeSearchingetc.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
theme_demo("darkly")
ui <- theme_demo("darkly")
server <- function(omput, output, session){}
shinyApp(ui, server)
ui <- theme_demo("darkly")
server <- function(ouput, output, session){}
shinyApp(ui, server)
ui <- theme_demo("darkly")
server <- function(){}
shinyApp(ui, server)
shinyApp(ui)
ui <- theme_demo("darkly")
server <- function(input, output, session) {
}
shinyApp(ui, server)
library(ggplot2)
freqpoly <- function(x1, x2, binwidth = 0.1, xlim = c(-3, 3)) {
df <- data.frame(
x = c(x1, x2),
g = c(rep("x1", length(x1)), rep("x2", length(x2)))
)
ggplot(df, aes(x, colour = g)) +
geom_freqpoly(binwidth = binwidth, size = 1) +
coord_cartesian(xlim = xlim)
}
t_test <- function(x1, x2) {
test <- t.test(x1, x2)
# use sprintf() to format t.test() results compactly
sprintf(
"p value: %0.3f\n[%0.2f, %0.2f]",
test$p.value, test$conf.int[1], test$conf.int[2]
)
}
x1 <- rnorm(100, mean = 0, sd = 0.5)
x2 <- rnorm(200, mean = 0.15, sd = 0.9)
freqpoly(x1, x2)
cat(t_test(x1, x2))
shinyApp(ui, server)
ui <- fluidPage(
fluidRow(
column(4,
"Distribution 1",
numericInput("n1", label = "n", value = 1000, min = 1),
numericInput("mean1", label = "µ", value = 0, step = 0.1),
numericInput("sd1", label = "σ", value = 0.5, min = 0.1, step = 0.1)
),
column(4,
"Distribution 2",
numericInput("n2", label = "n", value = 1000, min = 1),
numericInput("mean2", label = "µ", value = 0, step = 0.1),
numericInput("sd2", label = "σ", value = 0.5, min = 0.1, step = 0.1)
),
column(4,
"Frequency polygon",
numericInput("binwidth", label = "Bin width", value = 0.1, step = 0.1),
sliderInput("range", label = "range", value = c(-3, 3), min = -5, max = 5)
)
),
fluidRow(
column(9, plotOutput("hist")),
column(3, verbatimTextOutput("ttest"))
)
)
server <- function(input, output, session) {
output$hist <- renderPlot({
x1 <- rnorm(input$n1, input$mean1, input$sd1)
x2 <- rnorm(input$n2, input$mean2, input$sd2)
freqpoly(x1, x2, binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
x1 <- rnorm(input$n1, input$mean1, input$sd1)
x2 <- rnorm(input$n2, input$mean2, input$sd2)
t_test(x1, x2)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# now x1 and x2 in reactive function
x x1 <- reactive(rnorm(input$n1, input$mean1, input$sd1))
x2 <- reactive(rnorm(input$n2, input$mean2, input$sd2))
output$hist <- renderPlot({
# x1 <- rnorm(input$n1, input$mean1, input$sd1)
#x2 <- rnorm(input$n2, input$mean2, input$sd2)
freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
# x1 <- rnorm(input$n1, input$mean1, input$sd1)
#x2 <- rnorm(input$n2, input$mean2, input$sd2)
t_test(x1(), x2())
})
}
# now x1 and x2 in reactive function
x1 <- reactive(rnorm(input$n1, input$mean1, input$sd1))
x2 <- reactive(rnorm(input$n2, input$mean2, input$sd2))
output$hist <- renderPlot({
# x1 <- rnorm(input$n1, input$mean1, input$sd1)
#x2 <- rnorm(input$n2, input$mean2, input$sd2)
freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
# x1 <- rnorm(input$n1, input$mean1, input$sd1)
#x2 <- rnorm(input$n2, input$mean2, input$sd2)
t_test(x1(), x2())
})
server <- function(input, output, session) {
# now x1 and x2 in reactive function
x1 <- reactive(rnorm(input$n1, input$mean1, input$sd1))
x2 <- reactive(rnorm(input$n2, input$mean2, input$sd2))
output$hist <- renderPlot({
# x1 <- rnorm(input$n1, input$mean1, input$sd1)
#x2 <- rnorm(input$n2, input$mean2, input$sd2)
freqpoly(x1(), x2(), binwidth = input$binwidth, xlim = input$range)
}, res = 96)
output$ttest <- renderText({
# x1 <- rnorm(input$n1, input$mean1, input$sd1)
#x2 <- rnorm(input$n2, input$mean2, input$sd2)
t_test(x1(), x2())
})
}
shinyApp(ui, server)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(shiny)
library(vroom)
if (!require("vrrom")) install.packages("vroom")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries <- vroom::vroom("neiss/injuries.tsv.gz")
injuries <- vroom::vroom("data/injuries.tsv.gz")
injuries
products <- vroom::vroom("neiss/products.tsv")
products <- vroom::vroom("data/products.tsv")
population <- vroom::vroom("data/population.tsv")
prod_codes <- setNames(products$prod_code, products$title)
prod_codes
source('~/Uni/shiny buch/5_CaseStudy.R', echo=TRUE)
install.packages("vroom")
runApp('5_CaseStudy.R')
install.packages("vroom")
runApp('5_CaseStudy.R')
install.packages("vroom")
runApp('5_CaseStudy.R')
install.packages("vroom")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(shiny); runApp('6_debugging_casestudy.R')
library(shiny)
sales <- readr::read_csv("data/sales_data_sample.csv")
sales <- sales[c(
"TERRITORY", "ORDERDATE", "ORDERNUMBER", "PRODUCTCODE",
"QUANTITYORDERED", "PRICEEACH"
)]
ui <- fluidPage(
selectInput("territory", "territory", choices = unique(sales$TERRITORY)),
tableOutput("selected")
)
server <- function(input, output, session) {
selected <- reactive({
#browser()
subset(sales, TERRITORY %in% input$territory)
})
output$selected <- renderTable(head(selected(), 10))
}
shinyApp(ui, server)
runApp('6_debugging_casestudy.R')
subset(sales, TERRITORY %in% input$territory)
input$territory
runApp('6_debugging_casestudy.R')
unique(sales$TERRITORY)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
nearPoints(mtcars, input$plot_click)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shinyFeedback")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?need
source('~/.active-rstudio-document', echo=TRUE)
runApp('8_shownotification_transient.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('8_progressbar_waiter_Package.R')
runApp('8_progressbar_waiter_Package.R')
runApp('8_progressbar_waiter_Package.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shinycassloaders")
source('~/.active-rstudio-document', echo=TRUE)
install.packages("shinycssloaders")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
showModal()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggforce")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("reactlog")
# enalbe react log
reactlog::reactlog_enable()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
runApp('4_eventReactive_actionButton.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('16_actionButton_addValueToList_ThenresetInput.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd(r("C:\Users\lukas\Documents\shiny package"))
setwd(r"(C:\Users\lukas\Documents\shiny package)")
usethis::create_package("ecomAnalytics")
usethis::use_test("kpiCalculations")
usethis::use_description()
setwd(r"(C:\Users\lukas\Documents\GitHub\DSP_Sentiment_Covid_App)")
usethis::create_package("SentimentApp")
usethis::create_package("SentimentApp")
