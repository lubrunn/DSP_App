SIE <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/EfcJySCAF1JJvE1DmIityLAB9eYyrZDfo0DU_bchhnr5yA?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
VNA <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Ef-VKe52pSRAqyrdMSIk2DcBMc-N5x_pw_PCtDnmS8WK_A?download=1"
read.csv(filename)
}
#' @export
#' @rdname load_stocks
VOW3 <- function(){
filename <- "https://unitc-my.sharepoint.com/:x:/g/personal/zxmvp94_s-cloud_uni-tuebingen_de/Efut0CAhYUJOkR7ifEcUX94Bp2HglbiDSfMhzLrES7GkYA?download=1"
read.csv(filename)
}
library(shiny); runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
library(shiny)
library(shinyjs)
library(ggplot2)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectizeInput("Stock","Chose Company",
c(COMPONENTS_DE()[["Company.Name"]]),
multiple=TRUE,
selected = "Bayer "),
actionButton("reset","clear selected"),
sliderInput("dates",label="Timeseries",
value = c(median(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
),
mainPanel(plotOutput("plot",hover = hoverOpts("plot_hover", delay = 10, delayType = "debounce")),
uiOutput("hover_info"))
))
server <- function(input, output, session) {
all <- reactive({
symbols <- COMPONENTS_DE()[["Symbol"]][COMPONENTS_DE()[["Company.Name"]] %in% input$Stock]
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
all %>%
filter(Date >= input$dates[1] & Date <= input$dates[2])
})
observeEvent(input$reset,{
updateSelectizeInput(session,"Stock",selected = "Bayer ")
})
output$plot <- renderPlot({
ggplot(all(),aes(Date,Close.,color = name))+
geom_line()+
theme_classic()
})
output$hover_info <- renderUI({
hover <- input$plot_hover
point <- nearPoints(all(), hover, threshold = 100, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
})
}
shinyApp(ui, server)
1COV()
ADS()
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectizeInput("Stock","Chose Company",
c(COMPONENTS_DE()[["Company.Name"]]),
multiple=TRUE,
selected = "Bayer "),
actionButton("reset","clear selected"),
sliderInput("dates",label="Timeseries",
value = c(median(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
),
mainPanel(plotOutput("plot",hover = hoverOpts("plot_hover", delay = 10, delayType = "debounce")),
uiOutput("hover_info"))
))
median(as.Date(ADS()[["Date"]], "%b %d, %Y")
median(as.Date(ADS()[["Date"]], "%b %d, %Y"))
library(dplyr)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectizeInput("Stock","Chose Company",
c(COMPONENTS_DE()[["Company.Name"]]),
multiple=TRUE,
selected = "Bayer "),
actionButton("reset","clear selected"),
sliderInput("dates",label="Timeseries",
value = c(median(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
),
mainPanel(plotOutput("plot",hover = hoverOpts("plot_hover", delay = 10, delayType = "debounce")),
uiOutput("hover_info"))
))
min(as.Date(ADS()[["Date"]], "%b %d, %Y"))
as.Date(ADS()[["Date"]], "%b %d, %Y")
Sys.setlocale("LC_TIME", "English")
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectizeInput("Stock","Chose Company",
c(COMPONENTS_DE()[["Company.Name"]]),
multiple=TRUE,
selected = "Bayer "),
actionButton("reset","clear selected"),
sliderInput("dates",label="Timeseries",
value = c(median(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
),
mainPanel(plotOutput("plot",hover = hoverOpts("plot_hover", delay = 10, delayType = "debounce")),
uiOutput("hover_info"))
))
server <- function(input, output, session) {
all <- reactive({
symbols <- COMPONENTS_DE()[["Symbol"]][COMPONENTS_DE()[["Company.Name"]] %in% input$Stock]
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
all %>%
filter(Date >= input$dates[1] & Date <= input$dates[2])
})
observeEvent(input$reset,{
updateSelectizeInput(session,"Stock",selected = "Bayer ")
})
output$plot <- renderPlot({
ggplot(all(),aes(Date,Close.,color = name))+
geom_line()+
theme_classic()
})
output$hover_info <- renderUI({
hover <- input$plot_hover
point <- nearPoints(all(), hover, threshold = 100, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
})
}
shinyApp(ui, server)
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
symbols <- COMPONENTS_DE()[["Symbol"]][COMPONENTS_DE()[["Company.Name"]] %in% input$Stock]
symbols <- append(symbols,"GDAXI.DE")
COMPONENTS_DE()[["Company.Name"]]
symbols <- COMPONENTS_DE()[["Symbol"]][COMPONENTS_DE()[["Company.Name"]]]
symbols <- c("BAYN.DE","ADS.DE")
symbols <- append(symbols,"GDAXI.DE")
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectizeInput("Stock","Chose Company",
append(c(COMPONENTS_DE()[["Company.Name"]]),"GDAXI"),
multiple=TRUE,
selected = ""),
actionButton("reset","clear selected"),
sliderInput("dates",label="Timeseries",
value = c(median(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
),
mainPanel(plotOutput("plot",hover = hoverOpts("plot_hover", delay = 10, delayType = "debounce")),
uiOutput("hover_info"))
))
server <- function(input, output, session) {
all <- reactive({
req(input$Stock)
symbols <- COMPONENTS_DE()[["Symbol"]][COMPONENTS_DE()[["Company.Name"]] %in% input$Stock]
symbols <- append(symbols,"GDAXI.DE")
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s=="GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.close..")],as.numeric)
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
all %>%
filter(Date >= input$dates[1] & Date <= input$dates[2])
})
observeEvent(input$reset,{
updateSelectizeInput(session,"Stock",selected = "")
})
output$plot <- renderPlot({
req(input$Stock)
ggplot(all(),aes(Date,Close.,color = name))+
geom_line()+
theme_classic()
})
output$hover_info <- renderUI({
hover <- input$plot_hover
point <- nearPoints(all(), hover, threshold = 100, maxpoints = 1, addDist = TRUE)
if (nrow(point) == 0) return(NULL)
# calculate point position INSIDE the image as percent of total dimensions
# from left (horizontal) and from top (vertical)
left_pct <- (hover$x - hover$domain$left) / (hover$domain$right - hover$domain$left)
top_pct <- (hover$domain$top - hover$y) / (hover$domain$top - hover$domain$bottom)
# calculate distance from left and bottom side of the picture in pixels
left_px <- hover$range$left + left_pct * (hover$range$right - hover$range$left)
top_px <- hover$range$top + top_pct * (hover$range$bottom - hover$range$top)
# create style property fot tooltip
# background color is set so tooltip is a bit transparent
# z-index is set so we are sure are tooltip will be on top
style <- paste0("position:absolute; z-index:100; background-color: rgba(245, 245, 245, 0.85); ",
"left:", left_px + 2, "px; top:", top_px + 2, "px;")
# actual tooltip created as wellPanel
wellPanel(
style = style,
p(HTML(paste0("<b> Company: </b>", point$name, "<br/>",
"<b> Date: </b>", point$Date, "<br/>",
"<b> Price: </b>", point$Close., "<br/>")))
)
})
}
shinyApp(ui, server)
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.close..")],as.numeric)
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
GDAXI()
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
ADS()
GDAXI
GDAXI()
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
View(all)
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting["Adj..Close.."]) <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting)["Adj..Close.."] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting)[6] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
symbols <- "GDAXI.DE"
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting)[6] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
plotting <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting)[6] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
plotting <- NULL
all <- NULL
for (s in symbols) {
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting)[6] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
plotting <- NULL
}
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting)[6] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting["Volume"] <- as.numeric(gsub(",","",plotting$Volume))
plotting$name <- s
all <- rbind(all,plotting)
all <- NULL
plotting <- NULL
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
colnames(plotting)[6] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
all <- NULL
plotting <- NULL
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
if (s == "GDAXI.DE"){
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d %Y")
names(plotting)[6] <- "Adj.Close.."
} else {
plotting[c("Open","High","Low","Close.","Adj.Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj.Close..")],as.numeric)
plotting$Date <- as.Date(plotting$Date, "%b %d, %Y")
}
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
plotting[c("Open","High","Low","Close.","Adj..Close..")] <- sapply(plotting[c("Open","High","Low","Close.","Adj..close..")],as.numeric)
View(plotting)
View(plotting)
plotting <- do.call(paste0(sub("\\..*", "", s)), list())
plotting <- plotting[plotting$Close. != "-",]
View(plotting)
View(plotting)
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
selectizeInput("Stock","Chose Company",
c(COMPONENTS_DE()[["Company.Name"]]),
multiple=TRUE,
selected = ""),
actionButton("reset","clear selected"),
sliderInput("dates",label="Timeseries",
value = c(median(as.Date(ADS()[["Date"]], "%b %d, %Y")),max(as.Date(ADS()[["Date"]], "%b %d, %Y"))),
min = min(as.Date(ADS()[["Date"]], "%b %d, %Y")),
max = max(as.Date(ADS()[["Date"]], "%b %d, %Y")),
step = 1,timeFormat = "%F")
),
mainPanel(plotOutput("plot_DE",hover = hoverOpts("plot_hover_DE", delay = 10, delayType = "debounce")),
uiOutput("hover_info_DE")),
mainPanel(plotOutput("plot_US",hover = hoverOpts("plot_hover_US", delay = 10, delayType = "debounce")),
uiOutput("hover_info_US"))
))
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
runApp('C:/Users/Kai Brehm/Desktop/TESTINGUIFORSHINY.R')
usethis::create_package("KaiAPP")
